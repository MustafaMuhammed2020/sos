
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800060  00800060  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fa  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5a  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1c  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00003290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008bb  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e2  00000000  00000000  00003e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000047f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 38       	cpi	r26, 0x84	; 132
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  74:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED1_task>:

uint8_t button2_status = 0 ;

void LED1_task()
{
	LED_TOGGLE(LED1_PORT , LED1_PIN);
  7c:	63 e0       	ldi	r22, 0x03	; 3
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	0e 94 b3 00 	call	0x166	; 0x166 <LED_TOGGLE>
  84:	08 95       	ret

00000086 <LED2_task>:
}

void LED2_task()
{
	LED_TOGGLE(LED2_PORT , LED2_PIN);
  86:	62 e0       	ldi	r22, 0x02	; 2
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	0e 94 b3 00 	call	0x166	; 0x166 <LED_TOGGLE>
  8e:	08 95       	ret

00000090 <APP_init>:


/** INITIALIZATION FUNCTION **/
void APP_init(void)
{
	LED_INIT(LED1_PORT , LED1_PIN);
  90:	63 e0       	ldi	r22, 0x03	; 3
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	0e 94 af 00 	call	0x15e	; 0x15e <LED_INIT>

	LED_INIT(LED2_PORT , LED2_PIN);
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 af 00 	call	0x15e	; 0x15e <LED_INIT>
	
	Button_init();
  a0:	0e 94 85 00 	call	0x10a	; 0x10a <Button_init>
  a4:	08 95       	ret

000000a6 <Stop_button_task>:
}

void Stop_button_task(void)
{
	Is_pressed(BUTTON2_PORT , BUTTON2_PIN , &button2_status);
  a6:	40 e6       	ldi	r20, 0x60	; 96
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 90 00 	call	0x120	; 0x120 <Is_pressed>
	
	if (button2_status == 1)
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	21 f4       	brne	.+8      	; 0xc2 <Stop_button_task+0x1c>
	{
		sos_disable();
  ba:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sos_disable>
		
		button2_status = 0 ;
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	08 95       	ret

000000c4 <APP_start>:
// }

/** MAIN LOGIC **/
void APP_start(void)
{
	sos_create_task(0 , 0 , APP_init , ONE_TIME_EXECUTED_TASK);
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	48 e4       	ldi	r20, 0x48	; 72
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 13 02 	call	0x426	; 0x426 <sos_create_task>
    
	sos_create_task(1 , 1 , Stop_button_task , PERIODIC_TASK);
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	43 e5       	ldi	r20, 0x53	; 83
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 13 02 	call	0x426	; 0x426 <sos_create_task>
	
	//sos_create_task(2 , 1 , Start_button_task , PERIODIC_TASK);
	
	sos_create_task(2 , 300 , LED1_task , PERIODIC_TASK);
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	4e e3       	ldi	r20, 0x3E	; 62
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	6c e2       	ldi	r22, 0x2C	; 44
  ec:	71 e0       	ldi	r23, 0x01	; 1
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 13 02 	call	0x426	; 0x426 <sos_create_task>

	sos_create_task(3 , 500 , LED2_task , PERIODIC_TASK);
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	43 e4       	ldi	r20, 0x43	; 67
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	64 ef       	ldi	r22, 0xF4	; 244
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 13 02 	call	0x426	; 0x426 <sos_create_task>
	
	sos_run();
 104:	0e 94 ca 02 	call	0x594	; 0x594 <sos_run>
 108:	08 95       	ret

0000010a <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_setpindir>
	
	DIO_setpindir(BUTTON2_PORT , BUTTON2_PIN , DIO_PIN_INPUT);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	64 e0       	ldi	r22, 0x04	; 4
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_setpindir>
 11e:	08 95       	ret

00000120 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
 130:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
 132:	ae 01       	movw	r20, r28
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
 138:	0e 94 38 01 	call	0x270	; 0x270 <DIO_readpin>
	
	if (!pin_status) 
 13c:	81 11       	cpse	r24, r1
 13e:	05 c0       	rjmp	.+10     	; 0x14a <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	f8 01       	movw	r30, r16
 144:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	04 c0       	rjmp	.+8      	; 0x152 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	f8 01       	movw	r30, r16
 14e:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
 150:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <LED_INIT>:
/** RETURNS : VOID                                **/
/***************************************************/
void LED_OFF(uint8_t led_port , uint8_t ledpin)
{
	
	DIO_setpinvalue(led_port , ledpin , DIO_PIN_LOW); /** SET THE OUTPUT PIN AS LOW **/
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_setpindir>
 164:	08 95       	ret

00000166 <LED_TOGGLE>:
/** RETURNS : VOID                                **/
/***************************************************/
void LED_TOGGLE(uint8_t led_port , uint8_t ledpin)
{
	
	DIO_togglepin(led_port , ledpin); /** TOGGLE THE SPECIFIC LED **/
 166:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_togglepin>
 16a:	08 95       	ret

0000016c <main>:


int main(void)
{
	/** START TASKS EXECUTION **/
	APP_start();
 16c:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_start>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x4>

00000172 <DIO_setpindir>:
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 172:	44 23       	and	r20, r20
 174:	19 f0       	breq	.+6      	; 0x17c <DIO_setpindir+0xa>
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	e9 f1       	breq	.+122    	; 0x1f4 <DIO_setpindir+0x82>
 17a:	74 c0       	rjmp	.+232    	; 0x264 <DIO_setpindir+0xf2>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	99 f0       	breq	.+38     	; 0x1a6 <DIO_setpindir+0x34>
 180:	28 f0       	brcs	.+10     	; 0x18c <DIO_setpindir+0x1a>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	e9 f0       	breq	.+58     	; 0x1c0 <DIO_setpindir+0x4e>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	41 f1       	breq	.+80     	; 0x1da <DIO_setpindir+0x68>
 18a:	6e c0       	rjmp	.+220    	; 0x268 <DIO_setpindir+0xf6>
 18c:	2a b3       	in	r18, 0x1a	; 26
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_setpindir+0x26>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_setpindir+0x22>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	27 b3       	in	r18, 0x17	; 23
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setpindir+0x40>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setpindir+0x3c>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	87 bb       	out	0x17, r24	; 23
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret
 1c0:	24 b3       	in	r18, 0x14	; 20
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setpindir+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setpindir+0x56>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	84 bb       	out	0x14, r24	; 20
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
 1da:	21 b3       	in	r18, 0x11	; 17
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_setpindir+0x74>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_setpindir+0x70>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	81 bb       	out	0x11, r24	; 17
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	91 f0       	breq	.+36     	; 0x21c <DIO_setpindir+0xaa>
 1f8:	28 f0       	brcs	.+10     	; 0x204 <DIO_setpindir+0x92>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	d9 f0       	breq	.+54     	; 0x234 <DIO_setpindir+0xc2>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	29 f1       	breq	.+74     	; 0x24c <DIO_setpindir+0xda>
 202:	34 c0       	rjmp	.+104    	; 0x26c <DIO_setpindir+0xfa>
 204:	2a b3       	in	r18, 0x1a	; 26
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_setpindir+0x9e>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_setpindir+0x9a>
 214:	82 2b       	or	r24, r18
 216:	8a bb       	out	0x1a, r24	; 26
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
 21c:	27 b3       	in	r18, 0x17	; 23
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_setpindir+0xb6>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_setpindir+0xb2>
 22c:	82 2b       	or	r24, r18
 22e:	87 bb       	out	0x17, r24	; 23
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
 234:	24 b3       	in	r18, 0x14	; 20
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_setpindir+0xce>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_setpindir+0xca>
 244:	82 2b       	or	r24, r18
 246:	84 bb       	out	0x14, r24	; 20
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	21 b3       	in	r18, 0x11	; 17
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_setpindir+0xe6>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_setpindir+0xe2>
 25c:	82 2b       	or	r24, r18
 25e:	81 bb       	out	0x11, r24	; 17
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	08 95       	ret

00000270 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	99 f0       	breq	.+38     	; 0x29a <DIO_readpin+0x2a>
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_readpin+0x10>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	e9 f0       	breq	.+58     	; 0x2b4 <DIO_readpin+0x44>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	41 f1       	breq	.+80     	; 0x2ce <DIO_readpin+0x5e>
 27e:	34 c0       	rjmp	.+104    	; 0x2e8 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 280:	89 b3       	in	r24, 0x19	; 25
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_readpin+0x1a>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_readpin+0x16>
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	89 bb       	out	0x19, r24	; 25
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 296:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 298:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 29a:	86 b3       	in	r24, 0x16	; 22
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_readpin+0x34>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_readpin+0x30>
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	86 bb       	out	0x16, r24	; 22
 2ac:	fa 01       	movw	r30, r20
 2ae:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 2b0:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 2b2:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 2b4:	83 b3       	in	r24, 0x13	; 19
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_readpin+0x4e>
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_readpin+0x4a>
 2c2:	81 70       	andi	r24, 0x01	; 1
 2c4:	83 bb       	out	0x13, r24	; 19
 2c6:	fa 01       	movw	r30, r20
 2c8:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 2ca:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 2cc:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 2ce:	80 b3       	in	r24, 0x10	; 16
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_readpin+0x68>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_readpin+0x64>
 2dc:	81 70       	andi	r24, 0x01	; 1
 2de:	80 bb       	out	0x10, r24	; 16
 2e0:	fa 01       	movw	r30, r20
 2e2:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 2e4:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 2e6:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
 2e8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 2ea:	08 95       	ret

000002ec <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	91 f0       	breq	.+36     	; 0x314 <DIO_togglepin+0x28>
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_togglepin+0x10>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	d9 f0       	breq	.+54     	; 0x32c <DIO_togglepin+0x40>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	29 f1       	breq	.+74     	; 0x344 <DIO_togglepin+0x58>
 2fa:	30 c0       	rjmp	.+96     	; 0x35c <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
 2fc:	2b b3       	in	r18, 0x1b	; 27
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_togglepin+0x1c>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_togglepin+0x18>
 30c:	82 27       	eor	r24, r18
 30e:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 310:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
 312:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
 314:	28 b3       	in	r18, 0x18	; 24
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_togglepin+0x34>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_togglepin+0x30>
 324:	82 27       	eor	r24, r18
 326:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 328:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
 32a:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
 32c:	25 b3       	in	r18, 0x15	; 21
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_togglepin+0x4c>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_togglepin+0x48>
 33c:	82 27       	eor	r24, r18
 33e:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 340:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
 342:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
 344:	22 b3       	in	r18, 0x12	; 18
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_togglepin+0x64>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_togglepin+0x60>
 354:	82 27       	eor	r24, r18
 356:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 358:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
 35a:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
 35c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 35e:	08 95       	ret

00000360 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 360:	83 b7       	in	r24, 0x33	; 51
 362:	8f 77       	andi	r24, 0x7F	; 127
 364:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 366:	83 b7       	in	r24, 0x33	; 51
 368:	8f 7b       	andi	r24, 0xBF	; 191
 36a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 36c:	83 b7       	in	r24, 0x33	; 51
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 372:	83 b7       	in	r24, 0x33	; 51
 374:	8f 7e       	andi	r24, 0xEF	; 239
 376:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 378:	83 b7       	in	r24, 0x33	; 51
 37a:	8f 7d       	andi	r24, 0xDF	; 223
 37c:	83 bf       	out	0x33, r24	; 51
	 
	 en_a_initstatus = VALID_INIT ; /** INITIALIZATION STATUS IS TRUE **/
	 
 	 /* ENABLE INTERRUPT */
 	 set_bit(SREG , 7);
 37e:	8f b7       	in	r24, 0x3f	; 63
 380:	80 68       	ori	r24, 0x80	; 128
 382:	8f bf       	out	0x3f, r24	; 63
 	 set_bit(TIMSK , 0);
 384:	89 b7       	in	r24, 0x39	; 57
 386:	81 60       	ori	r24, 0x01	; 1
 388:	89 bf       	out	0x39, r24	; 57
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret

0000038e <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 38e:	83 b7       	in	r24, 0x33	; 51
 390:	81 60       	ori	r24, 0x01	; 1
 392:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 394:	83 b7       	in	r24, 0x33	; 51
 396:	8d 7f       	andi	r24, 0xFD	; 253
 398:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 39a:	83 b7       	in	r24, 0x33	; 51
 39c:	8b 7f       	andi	r24, 0xFB	; 251
 39e:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret

000003a4 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 3aa:	83 b7       	in	r24, 0x33	; 51
 3ac:	8d 7f       	andi	r24, 0xFD	; 253
 3ae:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 3b0:	83 b7       	in	r24, 0x33	; 51
 3b2:	8b 7f       	andi	r24, 0xFB	; 251
 3b4:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret

000003ba <TMR0_setcallback>:
/** ARGUMENTS  : void (*ptr)(void) (PINTER TO CALL BACK FUNCTION)      **/
/** RETURNS    : VOID                                                  **/
/************************************************************************/
void TMR0_setcallback( void (*ptr_func)(void) )
{
	ptr_func_tmr0_callback = ptr_func; /** TIMER0 GLOBAL POINTER POINTS TO THE PASSED FUNCTION **/
 3ba:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <ptr_func_tmr0_callback+0x1>
 3be:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <ptr_func_tmr0_callback>
 3c2:	08 95       	ret

000003c4 <__vector_11>:
}

/** TIMER0 INTERRUPT SERVICE ROUTINE **/
ISR(TIMER0_OVF_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	u8_gl_timer0_ovs++ ; /** INCREASE THE NUMBER OF OVERFLOWS BY 1 **/
 3e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gl_timer0_ovs>
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_gl_timer0_ovs>
	
 	if ( u8_gl_timer0_ovs == TICK_OVER_FLOW ) /** BECOMES TRUE WHEN TIME EQUALS TO TICK TIME OVER FLOW COUNTER **/
 3f0:	8e 33       	cpi	r24, 0x3E	; 62
 3f2:	39 f4       	brne	.+14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 	{
		ptr_func_tmr0_callback(); /** EXECUTE THE FUNCTION TO WHICH THE GLOBAL VARIABLE POINTS **/
 3f4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <ptr_func_tmr0_callback>
 3f8:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <ptr_func_tmr0_callback+0x1>
 3fc:	09 95       	icall
		
 		u8_gl_timer0_ovs = 0 ; /** REINITIALIZE TIMER0 OVERFLOW COUNTER TO 0 AGAIN **/
 3fe:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <u8_gl_timer0_ovs>
 	}
	 TCNT0 = 0 ;
 402:	12 be       	out	0x32, r1	; 50
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <sos_create_task>:
		str_gl_tasks_data[u8_a_task_id].ptr_func_task_handler = ptr_func_task ;    /** TASK HANDLER POINTS TO THE TASK **/
		str_gl_tasks_data[u8_a_task_id].enu_task_cycle_type = enu_task_cycle  ;    /** TASK CYCLIC TYPE                **/
	}
	
	return enu_modify_task_status ; /** RETURN THE FINAL STATUS **/
}
 426:	a8 2f       	mov	r26, r24
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	fd 01       	movw	r30, r26
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	ee 59       	subi	r30, 0x9E	; 158
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	03 80       	ldd	r0, Z+3	; 0x03
 43e:	f4 81       	ldd	r31, Z+4	; 0x04
 440:	e0 2d       	mov	r30, r0
 442:	ef 2b       	or	r30, r31
 444:	e1 f4       	brne	.+56     	; 0x47e <sos_create_task+0x58>
 446:	84 30       	cpi	r24, 0x04	; 4
 448:	e0 f4       	brcc	.+56     	; 0x482 <sos_create_task+0x5c>
 44a:	aa 0f       	add	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	aa 0f       	add	r26, r26
 450:	bb 1f       	adc	r27, r27
 452:	aa 0f       	add	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	ae 59       	subi	r26, 0x9E	; 158
 458:	bf 4f       	sbci	r27, 0xFF	; 255
 45a:	8c 93       	st	X, r24
 45c:	12 96       	adiw	r26, 0x02	; 2
 45e:	7c 93       	st	X, r23
 460:	6e 93       	st	-X, r22
 462:	11 97       	sbiw	r26, 0x01	; 1
 464:	14 96       	adiw	r26, 0x04	; 4
 466:	5c 93       	st	X, r21
 468:	4e 93       	st	-X, r20
 46a:	13 97       	sbiw	r26, 0x03	; 3
 46c:	15 96       	adiw	r26, 0x05	; 5
 46e:	2c 93       	st	X, r18
 470:	15 97       	sbiw	r26, 0x05	; 5
 472:	17 96       	adiw	r26, 0x07	; 7
 474:	1c 92       	st	X, r1
 476:	1e 92       	st	-X, r1
 478:	16 97       	sbiw	r26, 0x06	; 6
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	08 95       	ret
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret

00000486 <sos_delete_task>:
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ee 59       	subi	r30, 0x9E	; 158
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	20 81       	ld	r18, Z
 49c:	25 30       	cpi	r18, 0x05	; 5
 49e:	d0 f4       	brcc	.+52     	; 0x4d4 <sos_delete_task+0x4e>
 4a0:	fc 01       	movw	r30, r24
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 59       	subi	r30, 0x9E	; 158
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	23 81       	ldd	r18, Z+3	; 0x03
 4b4:	34 81       	ldd	r19, Z+4	; 0x04
 4b6:	23 2b       	or	r18, r19
 4b8:	79 f0       	breq	.+30     	; 0x4d8 <sos_delete_task+0x52>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	fc 01       	movw	r30, r24
 4c8:	ee 59       	subi	r30, 0x9E	; 158
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	14 82       	std	Z+4, r1	; 0x04
 4ce:	13 82       	std	Z+3, r1	; 0x03
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret

000004dc <sos_scheduler>:
 4dc:	cf 93       	push	r28
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	54 c0       	rjmp	.+168    	; 0x58a <sos_scheduler+0xae>
 4e2:	8c 2f       	mov	r24, r28
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	ee 59       	subi	r30, 0x9E	; 158
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	03 80       	ldd	r0, Z+3	; 0x03
 4fa:	f4 81       	ldd	r31, Z+4	; 0x04
 4fc:	e0 2d       	mov	r30, r0
 4fe:	30 97       	sbiw	r30, 0x00	; 0
 500:	09 f4       	brne	.+2      	; 0x504 <sos_scheduler+0x28>
 502:	42 c0       	rjmp	.+132    	; 0x588 <sos_scheduler+0xac>
 504:	dc 01       	movw	r26, r24
 506:	aa 0f       	add	r26, r26
 508:	bb 1f       	adc	r27, r27
 50a:	aa 0f       	add	r26, r26
 50c:	bb 1f       	adc	r27, r27
 50e:	aa 0f       	add	r26, r26
 510:	bb 1f       	adc	r27, r27
 512:	ae 59       	subi	r26, 0x9E	; 158
 514:	bf 4f       	sbci	r27, 0xFF	; 255
 516:	16 96       	adiw	r26, 0x06	; 6
 518:	2d 91       	ld	r18, X+
 51a:	3c 91       	ld	r19, X
 51c:	17 97       	sbiw	r26, 0x07	; 7
 51e:	21 15       	cp	r18, r1
 520:	31 05       	cpc	r19, r1
 522:	29 f5       	brne	.+74     	; 0x56e <sos_scheduler+0x92>
 524:	dc 01       	movw	r26, r24
 526:	aa 0f       	add	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	aa 0f       	add	r26, r26
 52c:	bb 1f       	adc	r27, r27
 52e:	aa 0f       	add	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	ae 59       	subi	r26, 0x9E	; 158
 534:	bf 4f       	sbci	r27, 0xFF	; 255
 536:	15 96       	adiw	r26, 0x05	; 5
 538:	2c 91       	ld	r18, X
 53a:	21 11       	cpse	r18, r1
 53c:	05 c0       	rjmp	.+10     	; 0x548 <sos_scheduler+0x6c>
 53e:	09 95       	icall
 540:	8c 2f       	mov	r24, r28
 542:	0e 94 43 02 	call	0x486	; 0x486 <sos_delete_task>
 546:	20 c0       	rjmp	.+64     	; 0x588 <sos_scheduler+0xac>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	fc 01       	movw	r30, r24
 556:	ee 59       	subi	r30, 0x9E	; 158
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	92 81       	ldd	r25, Z+2	; 0x02
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	97 83       	std	Z+7, r25	; 0x07
 562:	86 83       	std	Z+6, r24	; 0x06
 564:	03 80       	ldd	r0, Z+3	; 0x03
 566:	f4 81       	ldd	r31, Z+4	; 0x04
 568:	e0 2d       	mov	r30, r0
 56a:	09 95       	icall
 56c:	0d c0       	rjmp	.+26     	; 0x588 <sos_scheduler+0xac>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	fc 01       	movw	r30, r24
 57c:	ee 59       	subi	r30, 0x9E	; 158
 57e:	ff 4f       	sbci	r31, 0xFF	; 255
 580:	21 50       	subi	r18, 0x01	; 1
 582:	31 09       	sbc	r19, r1
 584:	37 83       	std	Z+7, r19	; 0x07
 586:	26 83       	std	Z+6, r18	; 0x06
 588:	cf 5f       	subi	r28, 0xFF	; 255
 58a:	c4 30       	cpi	r28, 0x04	; 4
 58c:	08 f4       	brcc	.+2      	; 0x590 <sos_scheduler+0xb4>
 58e:	a9 cf       	rjmp	.-174    	; 0x4e2 <sos_scheduler+0x6>
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <sos_run>:
/** PARAMETERS  : VOID                                                **/
/** RETURNS     : enu_system_status_t (ERROR STATUS)                  **/
/***********************************************************************/
enu_system_status_t sos_run(void)
{
	TMR0_setcallback(sos_scheduler) ; /** CALL SCHEDULER IN EACH OVERFLOW **/
 594:	8e e6       	ldi	r24, 0x6E	; 110
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TMR0_setcallback>
	
	TMR0_init();  /** INITIALIZE TIMER 0 **/
 59c:	0e 94 b0 01 	call	0x360	; 0x360 <TMR0_init>
	
	TMR0_start(); /** TIMER0 START COUNTING **/
 5a0:	0e 94 c7 01 	call	0x38e	; 0x38e <TMR0_start>
}
 5a4:	08 95       	ret

000005a6 <sos_disable>:
/** PARAMETERS  : VOID                                                **/
/** RETURNS     : enu_system_status_t (ERROR STATUS)                  **/
/***********************************************************************/
enu_system_status_t sos_disable(void)
{
	TMR0_stop();  /** STOP TIMER 0 **/
 5a6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TMR0_stop>
 5aa:	08 95       	ret

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
